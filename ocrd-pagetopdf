#!/bin/bash
set -eu
set -o pipefail
# showing cmd execution on std (deactivated for productive use)
#set -x

which ocrd >/dev/null 2>/dev/null || { echo "ocrd not in \$PATH. Panicking"; exit 1; }

SHAREDIR="$(cd "$(dirname "$0")" >/dev/null && pwd)"
SCRIPT_NAME="${0##*/}"

MIMETYPE_PAGE=$(ocrd bashlib constants MIMETYPE_PAGE)

main () {
    # Load ocrd bashlib functions
    # shellcheck source=../core/ocrd/bashlib/lib.bash
    source $(ocrd bashlib filename)
    
    ocrd__minversion 2.10.4

    # Describe calling script to lib.bash
    ocrd__wrap "$SHAREDIR/ocrd-tool.json" "$SCRIPT_NAME" "$@"

    cd "${ocrd__argv[working_dir]}"
    local page_id in_file_grp img_file_grp out_file_grp
    page_id=${ocrd__argv[page_id]:-}
    mets="${ocrd__argv[mets_file]}"
    IFS=',' read -ra in_grps <<< "${ocrd__argv[input_file_grp]}"
    in_file_grp="${in_grps[0]}"
    img_file_grp="${in_grps[1]:-}"
    if [ -z "$img_file_grp" ]; then
        ocrd log warning "Without a second input file group for images, the original imageFilename will be used"
    fi
    out_file_grp=${ocrd__argv[output_file_grp]}
    
    mkdir -p $out_file_grp

    # Parameters
    local negative2zero output_extension
    declare -a parameters=()
    if [ -z ${params['textequiv_level']:=} ]; then
        ocrd log warning "If you want to add a text layer, please set parameter 'textequiv_level' accordingly!"
    else
        # first letter is sufficient (case does not matter)
        parameters+=(-text-source ${params['textequiv_level']:0:1})
    fi
    parameters+=(${params['font']:+-font} ${params['font']:-})
    if [ ${params['outlines']:=} ]; then
        parameters+=(-outlines ${params['outlines']:0:1})
    fi

    case ${params['negative2zero']} in
        [tT]rue|1)
            negative2zero=1
            ;;
        *)
            negative2zero=0
    esac
    
    parameters+=(${params['script-args']})
    output_extension=${params['ext']}

    # Download the files and do the conversion
    local IFS=$'\n'
    files=($(ocrd workspace find \
        ${page_id:+-g} ${page_id:-} \
        -G $in_file_grp \
        -k local_filename \
        -k ID \
        -k pageId \
        --download))
    local IFS=$' \t\n'
    local n=0 zeros=0000
    for csv in "${files[@]}"; do
        let n+=1
        # Parse comma separated fields
        local IFS=$'\t'
        local fields=($csv)
        local IFS=$' \t\n'

        local in_file="${fields[0]}"
        local in_id="${fields[1]}"
        local pageid="${fields[2]:-}"
        declare -a options=(${parameters[*]})
		
        ocrd log info "processing page '$pageid'"
        
        if ! test -f "$in_file"; then
           ocrd log error "input file \"$in_file\" ID=${in_id} (pageId=${pageid}) is not on disk"
           continue
        fi
        ocrd log info "found PAGE file '$in_file'"
        
        # Rework coords in PAGE
        if ((negative2zero)); then
            local tmpfile
            tmpfile=$(mktemp --tmpdir ocrd-pagetopdf.XXXXXX)
            python3 "$SHAREDIR/ptp/negative2zero.py" "$in_file" $tmpfile
            in_file=$tmpfile
        fi
	    options+=(-xml "$in_file")

        if [ -n "$img_file_grp" ]; then
            img_file=$(ocrd workspace find \
                            -g $pageid -G $img_file_grp \
                            -m '//image/.*' \
                            -k local_filename --download)
        else
            # we could use xsltproc or xmlstarlet for this
            # (but that would add another dependency)
            img_file=$(python3 "$SHAREDIR/ptp/extract-imagefilename.py" "$in_file")
        fi

        if ! test -f "$img_file"; then
           ocrd log error "No image file '$img_file' for $in_id (pageId=$pageid)"
           continue
        fi
        options+=(-image "$img_file")

        # Output filename
        local out_id="${in_id//$in_file_grp/$out_file_grp}"
        if [ "x$out_id" = "x$in_id" ]; then
            out_id=${out_file_grp}_${zeros:0:$((4-${#n}))}$n
        fi
        local out_file="$out_file_grp/${out_id}$output_extension"
        options+=(-pdf "$out_file")
        
 
        ocrd log info "found image file '$img_file'"
        if ! output=$(java -jar "$SHAREDIR/ptp/PageToPdf.jar" "${options[@]}" 2>&1); then
            ocrd log error "PageToPdf failed for ID $in_id (pageId=$pageid): $output"
            continue
        elif ! [ -f "$out_file" -a -s "$out_file" ]; then
            ocrd log error "PageToPdf result is empty for ID $in_id (pageId=$pageid): $output"
            continue
        fi
        
        if ((negative2zero)); then
            rm $tmpfile
        fi

        # Add the output file to METS
        if [ -n "$pageid" ]; then
            options=( -g $pageid )
        else
            options=()
        fi
        if [[ "${ocrd__argv[overwrite]}" = true ]]; then
            options+=( --force )
        fi
        options+=( -G $out_file_grp
                   -m application/pdf
                   -i "$out_id"
                   "$out_file" )
        ocrd log info "adding output PDF file '$out_file'"
        ocrd workspace add "${options[@]}"

    done
    
    if [ ${params['multipage']:=} ]; then
        python3 "$SHAREDIR/ptp/multipagepdf.py" "$mets" "$out_file_grp" "$page_id" "${params['multipage']}" "${params['pagelabel']}" "${ocrd__argv['overwrite']}"
    fi
}


main "$@"
